#include <allegro.h>


//Declaramos todos los sonidos que vamos a usar.

MIDI *sonido;

// Declaramos el BITMAP de todas las Texturas que vallamos a USAR.
BITMAP* pj;
BITMAP* pasto;
BITMAP* ladrillo;
BITMAP* buffer;
BITMAP* espada1;
BITMAP* espada2;
BITMAP* espada3;
BITMAP* espada4;


//Coordenadas del personaje.
int x = 15;
int y = 15;
// Coordenadas temporales ( se usan para el movimiento ).
int tempX = 15;
int tempY = 15;

//Ataque
int facing = 0;


// Hacemos el piso del mapa.
int map[24][32] = {{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                   {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                   {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                   {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                   {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                   {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                   {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                   {1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1},
                   {1,1,1,1,1,1,1,1,1,1,2,3,3,3,3,3,3,3,3,3,2,1,1,1,1,1,1,1,1,1,1,1},
                   {1,1,1,1,1,1,1,1,1,1,2,3,3,3,3,3,3,3,3,3,2,1,1,1,1,1,1,1,1,1,1,1},
                   {1,1,1,1,1,1,1,1,1,1,2,3,3,3,3,3,3,3,3,3,2,1,1,1,1,1,1,1,1,1,1,1},
                   {1,1,1,1,1,1,1,1,1,1,2,3,3,3,3,3,3,3,3,3,2,1,1,1,1,1,1,1,1,1,1,1},
                   {1,1,1,1,1,1,1,1,1,1,2,3,3,3,3,3,3,3,3,3,2,1,1,1,1,1,1,1,1,1,1,1},
                   {1,1,1,1,1,1,1,1,1,1,2,3,3,3,3,3,3,3,3,3,2,1,1,1,1,1,1,1,1,1,1,1},
                   {1,1,1,1,1,1,1,1,1,1,2,3,3,3,3,3,3,3,3,3,2,1,1,1,1,1,1,1,1,1,1,1},
                   {1,1,1,1,1,1,1,1,1,1,2,3,3,3,3,3,3,3,3,3,2,1,1,1,1,1,1,1,1,1,1,1},
                   {1,1,1,1,1,1,1,1,1,1,2,3,3,3,3,3,3,3,3,3,2,1,1,1,1,1,1,1,1,1,1,1},
                   {1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1},
                   {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                   {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                   {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                   {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                   {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                   {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}};

// Hacemos la capa de OBJETOS del mapa.
int objMap[24][32] = {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}};
                   
                   // Configuramos el modo grafico en una funcion:
                                   
                   void configurarjuego(){
    // Creamos el BITMAP del BUFFER ( La pantalla ), le ponemos la resolucion que queramos.                    
    buffer = create_bitmap( 640, 480);
    //Declaramos cual es la textura del Personaje.
    pj = load_bitmap ( "pj.bmp", NULL);
    //Declaramos la textura del pasto.
    pasto = load_bitmap ( "pasto.bmp", NULL);
    //Declaramos la textura del Ladrillo.
    ladrillo = load_bitmap ( "ladrillo.bmp", NULL);
    //Declaramos la textura de la espada en posicion 1.
    espada1 = load_bitmap ( "espada1.bmp", NULL);
    //Declaramos la textura de la espada en posicion 2.
    espada2 = load_bitmap ( "espada2.bmp", NULL);
    //Declaramos la textura de la espada en posicion 3.
    espada3 = load_bitmap ( "espada3.bmp", NULL);
    //Declaramos la textura de la espada en posicion 4.
    espada4 = load_bitmap ( "espada4.bmp", NULL); 
    //Declaramos el sonido que vamos a utilizar.
    sonido = load_midi ("sonido.mid");
    
    
    //Declaramos cual es el Valor de cada textura en la tabla de array de mas arriba.
    for (int i = 0; i <= 24; i++){
        
        //Esto dice que, para el mapa, mientras se detecta i ( posicion vertical ) y T ( posicion horizontal), se van obteniendo los numeros.  
        for( int t = 0; t <= 32; t++){
            
            // Aca declaramos que si, el numero obtenido es 1, se llena con un rectangulo negro ese array ( tile ).
            if( map[i][t] == 1) draw_sprite ( buffer, pasto, t * 20, i * 20);
            
            //Aca declaramos que si el Numero obtenido es 2, se Coloca la textura del LADRILLO que declaramos mas arriba.
            else if( map[i][t] == 2) draw_sprite ( buffer, ladrillo, t * 20, i * 20);
            
            //Aca declaramos que si el numero obtenido es 3, se coloca la textura del PASTO que declaramos mas Arriba.
            else if( map[i][t] == 3) draw_sprite ( buffer, pasto, t * 20, i * 20);
            
            
           }       
        
    }  
    
    // Hacemos lo mismo aca, solo que para el mapa de objetos, y hacemos que si el numero obtenido es 100 se coloque la textura del personaje.
    for (int i = 0; i <= 24; i++){
     
        for( int t = 0; t <= 32; t++){
            
            if( objMap[i][t] == 1) draw_sprite( buffer, pj, t* 20, i * 20);
            if( objMap[i][t] == 96) draw_sprite( buffer, espada1, t* 20, i * 20);
            if( objMap[i][t] == 97) draw_sprite( buffer, espada2, t* 20, i * 20);
            if( objMap[i][t] == 98) draw_sprite( buffer, espada3, t* 20, i * 20);
            if( objMap[i][t] == 99) draw_sprite( buffer, espada4, t* 20, i * 20);
            
            
           }       
        
    }
    
    // Antes de cerrar la FUNCION, hacemos que se coloque ( se CREE ) la pantalla ( BUFFER).
    draw_sprite( screen, buffer, 0, 0);
                
    }
        // Declaramos la funcion del movimiento del personaje.
        void moverPersonaje(){
         
         tempX = x;
         tempY = y;
         
         if ( key[KEY_UP] && map[y - 1][x] == 3){
              
              facing = 1;
        
        if( objMap[y - 1][x] != 4){ 
                --y;
                }
                };
                if ( key[KEY_DOWN] && map[y + 1][x] == 3){
                     
                     facing = 2;
        
        if( objMap[y + 1][x] != 4){ 
                ++y;
                }
                };
        if ( key[KEY_LEFT] && map[y][x - 1] == 3){
             
             facing = 3;
        
        if( objMap[y][x - 1] != 4){ 
                --x;
                }
                };
       if ( key[KEY_RIGHT] && map[y][x + 1] == 3){
            
            facing = 4;
        
        if( objMap[y][x + 1] != 4){ 
                ++x;
                }
                };
                
                //Acquire_screen es para obtener los datos de la pantalla y poder modificarlos.
                acquire_screen();
    // Aca hacemos que, en la posicion donde estaba el personaje ANTES de moverse, aparezca el Sprite del PASTO, para evitar que quede un hueco en esa parte.
    draw_sprite( buffer, pasto, tempX * 20, tempY * 20);
    
    // Aca ponemos que en la posicion donde se encuentra el personaje en si, se CREE el dibujo de el mismo.
    draw_sprite( buffer, pj, x * 20, y * 20);
    
    // Refrescamos la pantalla ( la volvemos a crear)
    draw_sprite( screen, buffer, 0, 0);
    
    // Release_screen para dejar de utilizar la pantalla ( POR EL ACQUIRE_SCREEN )
    release_screen();
    
    objMap[tempY][tempX] = 0;
    objMap[y][x] = 101;
    
    
    rest(100);
}

    void golpe(){
         
         tempX = x;
         tempY = y;
         
         if ( key[KEY_SPACE] ){
              
              if (facing == 1){
                  if (objMap[y - 1][x] != 4) draw_sprite ( buffer, espada1, x * 20, (y - 1) * 20);
                  objMap[y - 1][x] = 96;
                  rest(10);
                         };
              if (facing == 2){
                  if (objMap[y + 1][x] != 4) draw_sprite ( buffer, espada2, x * 20, (y + 1) * 20);   
                  rest(10);  
                         };
              if (facing == 3){
                  if (objMap[y][x - 1] != 4) draw_sprite ( buffer, espada3, (x-1) * 20, y * 20); 
                  rest(10);      
                         };
                         
              if (facing == 4){
                  if (objMap[y][x + 1] != 4) draw_sprite ( buffer, espada4, (x+1) * 20, y * 20);  
                  rest(10);     
                         };         
              }
         
         
         };
         
         void refrescarpantalla(){
              
              
              };    
         
         void musica(){
              
              int driver1, driver2;
              detect_digi_driver(driver1);
              detect_midi_driver(driver2);
              reserve_voices(10,10);
              install_sound(driver1, driver2, "cfg_patch");
              if((driver1 == 0) || (driver2 == 0)){
                          allegro_message("Error al cargar la configuracion de sonido");
                          exit(-1);
                          }
              set_volume(150,150);
              
              }
                
   // Iniciamos el codigo con el macro de allegro, y antes del bucle del juego ( while ) usamos la funcion configurarjuego() para crear la pantalla, y dentro del while ponemos el movimiento del personaje para que este se pueda mover.
    int main(){
    
    allegro_init();
    install_keyboard();
    install_sound(DIGI_AUTODETECT,MIDI_AUTODETECT,0);
    set_color_depth(16);
    set_gfx_mode( GFX_AUTODETECT, 640, 480, 0, 0);
    
    configurarjuego();
    
    play_midi(sonido, 1);
    
    while( !key[KEY_ESC]){
     
         moverPersonaje();
         golpe();  
    }    
    
    destroy_midi(sonido);

    
    return 0;
}
END_OF_MAIN();

/* FIN */ 
